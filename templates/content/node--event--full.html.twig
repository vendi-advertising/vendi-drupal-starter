{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "event" it would result in "node--type-event". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'event-type-' ~ content.field_event_category[0]['#title'],
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}

<article{{ attributes.addClass(classes)  }}>

   {% if content.field_event_name|render is not empty %}
      <h1 class="event-name">
        {{ content.field_event_name }}
      </h1>
  {% endif %}


    {% if content.field_event_date|render is not empty %}
    <span class="event-time">
      {{ content.field_event_date }} - {{ content.field_event_time }}
    </span>
  {% endif %}


  {% if content.body|render is not empty %}
    <span class="event-body">
      {{ content.body }}
    </span>
  {% endif %}

  <div class="event-panelists">
      {% if content.field_event_panelists|render is not empty %}
        <div>
          {{content.field_event_panelists}}
        </div>
      {% endif %}


  </div>
  {% if content.field_event_panelists|render is not empty %}
      <div class="webinar-register button"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"><path data-name="Path 36" d="M0 0h24v24H0z" fill="currentColor" aria-labelledby="quoteImage" role="img"/><path data-name="Path 37" d="M17 12h-5v5h5zM16 1v2H8V1H6v2H5a2 2 0 00-1.99 2L3 19a2 2 0 002 2h14a2 2 0 002-2V5a2 2 0 00-2-2h-1V1zm3 18H5V8h14z"/></svg>{{ content.field_event_register_link }}</div>
    {% endif %}


</article>

<div class="sidebar">


    <div class="event-tax">
      Webinar
    </div>

    {% if content.field_event_presented_by|render is not empty %}
     
      <div class="event-author">
        <span>Hosted by </span>
        <span>{{ content.field_event_presented_by[0]['#title'] }}</span>
      </div>
    {% endif %}

  </span>


</div>

