{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    'background-color-' ~ content.field_color[0]['#markup'],
    'bkg-image-' ~ content.field_testimonial_image['#field_name'],
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{% block paragraph %}
  <section{{ attributes.addClass(classes) }}>
    {% block content %}

    <div class="test-col-left">

      {% if content.field_quote|render is not empty %}

          <div class="test-quote-wrap">
            <div class="quote-img">
              <svg xmlns="http://www.w3.org/2000/svg" width="78" height="272" viewBox="0 0 78 272" fill="currentColor" aria-labelledby="quoteImage" role="img">
                <text id="_" data-name="“" transform="translate(0 220)" font-size="227" font-family="ArgentCF-Regular, Argent CF"><tspan x="0" y="0">“</tspan></text>
              </svg>
            </div>

            <div class="test-quote">
              {{ content.field_quote[0]['#context']['value'] }}
            </div>
          </div>

      {% endif %}

      {% if content.field_author|render is not empty %}
        <div class="test-author">
          {{ content.field_author[0]['#context']['value'] }}
        </div>
      {% endif %}

      {% if content.field_case_study_link|render is not empty %}
          <div class="test-case-study link button">
        
              <a href="{{ content.field_case_study_link[0]['#url'] }}">
                {{ content.field_case_study_link[0]['#title'] }}
              </a>
          </div>
      {% endif %}
      
      {% if content.field_testimonial_school_logo|render is not empty %}
        <div class="test-logo">
          {{ content.field_testimonial_school_logo }}
        </div>
      {% endif %}

    </div>
    <div class="test-col-right"> 
        {% if content.field_testimonial_image|render is not empty %}
          <div class="test-image">
            {{ content.field_testimonial_image }}
          </div>
        {% endif %}


    </div>


    {% endblock %}
  </section>
{% endblock paragraph %}
